// Copyright © 2015 Venture Media Labs. All rights reserved.
//
// This file is part of BrainCore. The full BrainCore copyright notice,
// including terms governing use, modification, and redistribution, is
// contained in the file LICENSE at the root of the source code distribution
// tree.

import Metal
import Upsurge

public typealias Blob = ValueArray<Float>

public protocol Layer {
}

public protocol DataLayer: Layer {
    /// The number of output values generated by this layer for each batch element. This value may not change after the layer is added to a network.
    var outputSize: Int { get }

    /// The data to use for the next forward pass of the network. The size of the returned data blob must be `batchSize × outputSize` and there should be `outputSize` consecutive elements for each batch.
    func nextBatch(batchSize: Int) -> Blob
}

public protocol ForwardLayer: Layer {
    func setupInLibrary(library: MTLLibrary) throws

    /// The number of input values used by this layer for each batch element. This value may not change after the layer is added to a network.
    var inputSize: Int { get }

    /// The number of output values generated by this layer for each batch element. This value may not change after the layer is added to a network.
    var outputSize: Int { get }

    /// Encode a forward propagation kernel into a command buffer.
    func encodeForwardInBuffer(buffer: MTLCommandBuffer, batchSize: Int, input: MTLBuffer, offset inputOffset: Int, output: MTLBuffer, offset outputOffset: Int)
}

public protocol BackwardLayer: ForwardLayer {
    /// Backward-propagate the output differences
    func encodeBackwardInBuffer(buffer: MTLCommandBuffer, batchSize: Int, outputDiff: MTLBuffer, input: MTLBuffer, inputDiff: MTLBuffer)
}

public protocol TrainableLayer {
    /// Update parameters for training.
    func encodeParametersUpdate(encodeAction: (values: MTLBuffer, deltas: MTLBuffer) -> Void)
}

public protocol LossLayer: ForwardLayer {
    /// Compute the loss input deltas based on labels and actual values. The labels should be contained in the first half of the input buffer and the actual values on the second half.
    func encodeBackwardLossInBuffer(buffer: MTLCommandBuffer, batchSize: Int, input: MTLBuffer, deltas: MTLBuffer)
}

public protocol SinkLayer: Layer {
    /// The number of input values used by this layer for each batch element. This value may not change after the layer is added to a network.
    var inputSize: Int { get }

    /// Consume data generated by the network.
    func consume(input: Blob)
}
