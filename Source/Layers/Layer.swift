// Copyright Â© 2015 Venture Media Labs. All rights reserved.
//
// This file is part of BrainCore. The full BrainCore copyright notice,
// including terms governing use, modification, and redistribution, is
// contained in the file LICENSE at the root of the source code distribution
// tree.

import Metal
import Upsurge

public typealias Blob = ValueArray<Float>

public protocol Layer {
}

public protocol DataLayer: Layer {
    /// The size of the layer's data blob. This value may not change after the layer is added to a network.
    var outputSize: Int { get }

    /// The data to use for the next forward pass of the network. The size of the data blob must match the value of
    /// `outputSize`.
    var data: Blob { get }
}

public protocol ForwardLayer: Layer {
    func setupInLibrary(library: MTLLibrary) throws

    /// The size of the input buffer used for this layer. This value may not change after the layer is added to a
    /// network.
    var inputSize: Int { get }

    /// The size of the output buffer required by this layer. This value may not change after the layer is added to a
    /// network.
    var outputSize: Int { get }

    /// Forward-propagate the input
    func encodeForwardInBuffer(buffer: MTLCommandBuffer, batchSize: Int, input: MTLBuffer, offset inputOffset: Int, output: MTLBuffer, offset outputOffset: Int)
}

public protocol BackwardLayer: ForwardLayer {
    /// Backward-propagate the output differences
    func encodeBackwardInBuffer(buffer: MTLCommandBuffer, batchSize: Int, outputDiff: MTLBuffer, input: MTLBuffer, inputDiff: MTLBuffer)
}

public protocol LossLayer: BackwardLayer {
    var loss: Double { get set }
}

public protocol BackwardParameterLayer: BackwardLayer {
    func setupInLibrary(library: MTLLibrary, updateFunctionName: String) throws
    
    /// Update any parameters after performing backwards pass.
    func update(buffer: MTLCommandBuffer, solverParams: MTLBuffer?)
}

public protocol SinkLayer: Layer {
    /// Consume data generated by the network.
    func consume(input: Blob)
}
